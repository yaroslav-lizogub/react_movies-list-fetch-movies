{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","props","addMovie","useState","query","setQuery","setMovie","isMovieLoading","setIsMovieLoading","hasError","setHasError","htmlFor","type","id","placeholder","value","onChange","event","target","classNames","onClick","preventDefault","trim","length","fetch","then","res","json","catch","Response","Error","getMovie","loadedMovie","Promise","reject","Poster","Title","Plot","imdbID","resolve","finally","disabled","App","setMovies","useCallback","prevMovies","some","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a769de4.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieData } from '../../types/MovieData';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\n\ninterface Props {\n  addMovie: (movie: Movie) => void;\n}\n\nexport const FindMovie: React.FC<Props> = (props) => {\n  const { addMovie } = props;\n\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isMovieLoading, setIsMovieLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  const handleSearchBtn = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    setIsMovieLoading(true);\n\n    if (query.trim().length) {\n      getMovie(query)\n        .then((loadedMovie) => {\n          if ('Error' in loadedMovie) {\n            return Promise.reject(loadedMovie.Error);\n          }\n\n          const {\n            Poster,\n            Title,\n            Plot,\n            imdbID,\n          } = loadedMovie as MovieData;\n\n          setMovie({\n            title: Title,\n            description: Plot,\n            imgUrl: Poster === 'N/A'\n              ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n              : Poster,\n            imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n            imdbId: imdbID,\n          });\n\n          return Promise.resolve();\n        })\n        .catch(() => setHasError(true))\n        .finally(() => setIsMovieLoading(false));\n    }\n  };\n\n  const clear = () => {\n    setQuery('');\n    setMovie(null);\n    setHasError(false);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={(event) => {\n                setQuery(event.target.value);\n                setHasError(false);\n              }}\n            />\n          </div>\n\n          {hasError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button is-light', {\n                'is-loading': isMovieLoading,\n              })}\n              onClick={handleSearchBtn}\n              disabled={!query}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => {\n                  addMovie(movie);\n                  clear();\n                }}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          {movie && <MovieCard movie={movie} />}\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=d049b4a';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = useCallback((movie) => {\n    setMovies((prevMovies) => {\n      if (prevMovies.some(item => item.imdbId === movie.imdbId)) {\n        return [...prevMovies];\n      }\n\n      return [...prevMovies, movie];\n    });\n  }, [movies]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}